[gcode_shell_command update_git_script]
command: bash /home/pi/klipper-backup/script.sh
timeout: 90.0
verbose: True

[gcode_macro Z_update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_BASE
gcode:
    QUAD_GANTRY_LEVEL_BASE horizontal_move_z=10 retry_tolerance=1.000
    QUAD_GANTRY_LEVEL_BASE horizontal_move_z=2
    

[gcode_macro BMC]
gcode:
	BED_MESH_CALIBRATE

[delayed_gcode DISABLEFILAMENTSENSOR]	
initial_duration: 1
gcode:
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro PURGE_BLOB]
gcode:
    # This is for a 300mm bed. If you have a diferent bed size you may want to adjust the line below
    {% set rand_pos = (105 + ( printer.system_stats.cputime * 1000 ) % 60) %}           ; Generate pseudo random start pos so we dont wear out that one spot on the bed. 
#    {% set rand_pos = (45 + ( printer.system_stats.cputime * 1000 ) % 60) %}           ; Generate pseudo random start pos so we dont wear out that one spot on the bed. 
    M117 Purging at X{ rand_pos }                                                       
    
    # The start pos will be within the "handle" of the flex plate where there is some extra Y space available so we can go all the way to Y0
    # If your setup does not have this extra space then just increase the y valie in the line "G1 X{ rand_pos } Y0 Z1 F18000"
    G92 E0                          ; zero the extruder
    G90                             ; absolute positioning
    G1 X{ rand_pos } Y0 Z1 F18000   ; Go to start pos for perge line
    G1 Z0.4 F600                    ; Lower to purge height
#    G1 Z1.0 F600                    ; Lower to purge height
    G91                             ; relative positioning
    G1 X5 E40 F40                   ; Extrude blob of filament on the bed
    M106 P0                         ; Enable Cooling Fan
    G1 X20 Z5 F100                  ; Slow drag away from the blob with fans helping cool and break strings. Also raiz z zo the blob clears the fan duct
    G1 X5  Z-5.1 F9000              ; Now that the blob has cleared the duct we go back down for a short 0.3mm height extrusion
    G1 X5 E2 F180                   ; Slow 5mm extrude move to help with stringing
    G1 X30 E-1 F6000                ; Fast move and retract to break strings and reduce ooze
    G1 Z1 F100                      ; Lift
    M106 P0 S0                      ; Disable Cooling Fan
    G92 E0                          ; zero the extruder
    G90                             ; absolute positioning
     



[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  SKEW_PROFILE LOAD=CaliFlower

  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan
    
  STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # {% if params.BED|int > 90 %}
  #   SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
  #   STATUS_HEATING                                      # Set LEDs to heating-mode
  #   M106 S255                                           # Turn on the PT-fan


    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c

  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  G28 Z                                                # Home Z again after QGL

  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  #CARTOGRAPHER_TOUCH                                    # Calibrate z offset only with hot nozzle

  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  PURGE_BLOB                                            # Primeline

[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    G1 E-5.0 F1800                           ; retract filament
    M107                                     ; turn off fan
    
    status_ready
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    SET_SKEW CLEAR=1


[gcode_macro M600]
variable_park_x: 220
variable_park_y: 10
variable_z_lift: 40
variable_velocity: 60
variable_retract: 1
gcode:
    SAVE_GCODE_STATE NAME=STATE_M600
    
    # remembers the position
    # fluidd annoyingly redefines this macro to retract and park the toolhead at the rear
    PAUSE  
    
    # safe park coords
    {% set th = printer.toolhead %}
    {% set park_x = [params.X|default(park_x)|int, th.axis_maximum.x-2]|min %}
    {% set park_y = [params.Y|default(park_y)|int, th.axis_maximum.y-10]|min %}
    {% set park_z = [th.position.z + params.Z_LIFT|default(z_lift)|int, th.axis_maximum.z]|min %}
    {% set park_feedrate = params.VELOCITY|default(velocity)|int * 60 %}
    
    # retract at 50mm/sec
    G91
    G1 E-{retract} F3000
    
    # park toolhead
    G90
    G0 X{park_x} Y{park_y} Z{park_z} F{park_feedrate}
    
    # unload 15mm of filament
    G91
    G1 E-10 F3600
    G1 E-105 F3600
    
    # ask the waiter for a refill
    M117 Refill please
    
    RESTORE_GCODE_STATE NAME=STATE_M600


[gcode_macro PREHEAT_ABS_ASA]
gcode:
  G90
  G28

  G0 X175 Y175 Z50 F3600
  #--------------------------------------------------------------------
  M106 S255
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=110
  M104 S140
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=160
  status_heating

[gcode_macro G28]
rename_existing: G0028
variable_homing:False
gcode:
    SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=True
    G0028 {rawparams}
    SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=False


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  G1 E-5.0 F1800                 ; retract filament
  CANCEL_PRINT_BASE


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro AUTOGREASER]
gcode:
    M108 AUTO GREASER
    G28
    SAVE_GCODE_STATE NAME=AUTOGREASER
    G90                                                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Z25 Y{printer.toolhead.axis_maximum.y/2} F15000            ; move to right
    {% for iteration in range(10|int) %}
        G0 X{printer.toolhead.axis_maximum.x/2 - 165 } F15000
        G0 X{printer.toolhead.axis_maximum.x/2 + 165 } F15000
        G0 X{printer.toolhead.axis_maximum.x/2 - 165 } F15000
        G0 X{printer.toolhead.axis_maximum.x/2 + 165 } F15000
    {% endfor %}
    {% for iteration in range(10|int) %}
        G0 Y{printer.toolhead.axis_maximum.y/2 - 165 } F15000
        G0 Y{printer.toolhead.axis_maximum.y/2 + 165 } F15000
        G0 Y{printer.toolhead.axis_maximum.y/2 - 165 } F15000
        G0 Y{printer.toolhead.axis_maximum.y/2 + 165 } F15000
    {% endfor %}
    G28
    M108 TADA!!!
# #############################        LED CASE LIGHTING        #################################

# # Chamber Lighting
# [output_pin caselight]
# pin: PD12
# #max_power: 1.0
# #kick_start_time: 0.5
# pwm: true
# shutdown_value: 0
# value: 1
# cycle_time: 0.01
# #scale: 100


# # Lighting Control
# [gcode_macro lights_off]
# gcode:
#     SET_PIN PIN=caselight VALUE=0

# [gcode_macro lights_on]
# gcode:
#     SET_PIN PIN=caselight VALUE=100

# [gcode_macro lights_toggle]
# gcode:
#     {% if printer["output_pin caselight"].value == 100 %}
#         lights_off
#     {% else %}
#         lights_on
#     {% endif %}

######################### LCD RGB CONTROLS #########################

# Set LCD RGB at startup
#[delayed_gcode SETDISPLAYNEOPIXEL]
#initial_duration: 1
#gcode:
#	RESETRGB
	
# Default RGB
#[gcode_macro RESETRGB]
#gcode:
#	SET_LED LED=lcd RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
#	SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
#	SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3
#
# Example LCDRGB R=1 G=0 B=0
#[gcode_macro LCDRGB]
#gcode:
#	{% set r = params.R|default(1)|int %}
#	{% set g = params.G|default(1)|int %}
#	{% set b = params.B|default(1)|int %}
#
#	SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
#	SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
#	SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=3
